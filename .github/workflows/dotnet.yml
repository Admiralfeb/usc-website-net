name: .NET

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: SonarQube Start
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"Admiralfeb_usc-website-net" /o:"admiralfeb" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths='TestResults/*.trx' /d:sonar.cs.opencover.reportsPaths='./**/coverage.opencover.xml'
      - name: Build
        run: dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: Publish
        run: dotnet test --no-build --logger trx -r TestResults --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover Client.Test
      - name: SonarQube End
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: Codecov
        uses: codecov/codecov-action@v1
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 'Test Results'
          path: '**/**/*.trx'
          reporter: dotnet-trx

  playwright:
    name: Playwright Tests ${{ matrix.browser }}
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
      - name: Use .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }} chromium
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet --no-restore publish -c Release -o Output /p:ContinuousIntegrationBuild=true
      - name: Test
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- dotnet --no-build test E2ETest
