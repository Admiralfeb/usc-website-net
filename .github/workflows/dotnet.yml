name: .NET Build, Test, Deploy

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
    branches-ignore:
      - 'dependabot/**'

jobs:
  build_and_test:
    name: Build and Test
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x      
      - name: Login to Nuget
        run: dotnet nuget add source --username Admiralfeb --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Admiralfeb/index.json"
      - name: Restore dependencies
        run: dotnet restore
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: SonarQube Start
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"Admiralfeb_usc-website-net" /o:"admiralfeb" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths="TestResults/*.trx" /d:sonar.cs.opencover.reportsPaths="./**/coverage.opencover.xml" /d:sonar.projectBaseDir="${{ github.workspace }}"
      - name: Build
        run: dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: Unit Test
        run: dotnet test ./Client.Test --no-build --logger trx -r TestResults --verbosity normal --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: SonarQube End
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: Codecov
        uses: codecov/codecov-action@v1
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 'Test Results'
          path: '**/**/*.trx'
          reporter: dotnet-trx

  build_for_playwright:
    name: Build for Playwright
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Login to Nuget
        run: dotnet nuget add source --username Admiralfeb --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Admiralfeb/index.json"
      - name: Build
        run: dotnet publish -c Release -o Output /p:ContinuousIntegrationBuild=true
      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: Output
          key: ${{ runner.os }}-cache-build


  playwright:
    name: Playwright Tests
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    runs-on: ubuntu-latest
    needs: build_for_playwright

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - name: Use .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x        
      - name: Login to Nuget
        run: dotnet nuget add source --username Admiralfeb --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Admiralfeb/index.json"
      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }} chromium
      - name: Restore
        run: dotnet restore
      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: Output
          key: ${{ runner.os }}-cache-build
      - name: Test
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- dotnet test --logger trx -r TestResults --verbosity normal E2ETest
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 'Test Results Playwright ${{ matrix.browser }}'
          path: '**/**/*.trx'
          reporter: dotnet-trx

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }} && (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.base_ref == 'main' && (github.event_name == 'pull_request' && github.event.action != 'closed'))
    needs: [build_and_test, playwright]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true          
      - name: Login to Nuget
        run: dotnet nuget add source --username Admiralfeb --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Admiralfeb/index.json"
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DELIGHTFUL_DESERT_0E4C94510 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: 'Client' # App source code path
          api_location: 'Api' # Api source code path - optional
          output_location: 'wwwroot' # Built app content directory - optional
          ###### End of Repository/Build Configurations ######
